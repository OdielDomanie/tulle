defmodule Tulle.Http1.Request do
  alias Mint.HTTP1

  use GenServer

  def init(conn_holder) do
    state = %{
      external: %{conn_holder: conn_holder},
      places: %{
        sending_request: nil,
        awaiting: :request,
        resp_status: nil,
        return: nil
      }
    }

    {:ok, state}
  end



  # def send_request(conn_holder, {_path, _method, _headers, _body} = pmhb) do
  #   init(%{conn_holder: conn_holder})
  #   |> event({:sending_request, pmhb})
  #   |> receive_until_return
  # end

  # defp receive_until_return(state) do
  #   case receive_event(state) do
  #     %{return: true} = state -> state
  #   end
  # end

  # def init(external) do
  #   %{
  #     external: external,
  #     places: %{
  #       sending_request: nil,
  #       awaiting: :request,
  #       resp_status: nil,
  #       return: nil
  #     }
  #   }
  # end

  # def event(state, {place, event}) do
  #   state = put_in(state, [:places, place], event)
  #   transition_n_send(state)
  # end

  # def receive_event(state) do
  #   receive do
  #     {:event, msg} -> event(state, msg)
  #   end
  # end

  # defp transition_n_send(state) do
  #   {send_external, new_places} = transition(state.places)

  #   for {dest_id, msg} <- send_external do
  #     fn ->
  #       :ok = GenServer.call(state.external[dest_id], {:event, msg})
  #     end
  #     |> Task.async()
  #   end
  #   |> Task.await_many()

  #   if new_places != state.places do
  #     transition_n_send(new_places)
  #   else
  #     %{state | places: new_places}
  #   end
  # end

  # # send_status
  # defp transition(%{sending_request: pmhb, awaiting: :request} = state) do
  #   {
  #     [{:conn_holder, pmhb}],
  #     %{state | sending_request: nil, awaiting: :req_ref}
  #   }
  # end

  # # get_headers
  # defp transition(%{
  #        awaiting: {:resp, ref},
  #        resp_status: {ref, status},
  #        resp_headers: {ref, headers}
  #      } = state) do
  #   {
  #     [],
  #     %{state | resp_status: nil, resp_headers: nil, return: {status, headers}}
  #   }
  # end
end
